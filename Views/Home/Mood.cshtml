@model List<Journal.Domain.DayEntry>

@{
    ViewData["Title"] = "Mood";
}




<section class="section" style="padding-top:1em">
    <div class="container is-fluid has-text-centered">
        <div class="columns is-centered">
            <div class="column">

                <figure class="highcharts-figure">
                    <div id="container"></div>
                </figure>
            </div>
        </div>
    </div>
</section>




@section Scripts {

    <script src="js/lib/highcharts.js"></script>

    <script>

        @{ 
            Func<MoodEnum, string> colorFunc = (mood) =>
            {
                switch (mood)
                {
                    case MoodEnum.Joyous: return "hsl(171, 100%, 41%)";
                    case MoodEnum.Happy: return "hsl(141, 53%, 53%)";
                    case MoodEnum.Neutral: return "hsl(0, 0%, 71%)";
                    case MoodEnum.Unhappy: return "hsl(348, 100%, 61%)";
                    case MoodEnum.Terrible: return "hsl(0, 0%, 7%)";


                    default:
                        return "#CCC";
                }
            };
        }

    var dates = [ @Html.Raw(string.Join(",", Model.OrderBy(d => d.Day).Select(d => $@"{{ x: new Date(""{d.Day}"").getTime(), y: {(int)d.Mood}, color: '{colorFunc(d.Mood)}' }}"))) ];
    var chart = Highcharts.chart('container', {
        chart: {
            type: 'line',
            zoomType: 'x'
        },
        title: {
            text: null
        },
        subtitle: {
            text: null
        },
        credits: {
            enabled: false
        },
        legend: {
            enabled: false
        },
        xAxis: {
            type: 'datetime',
            title: {
                text: null
            },
            lineWidth: 0
        },
        yAxis: {
            title: {
                text: null
            },
            labels: {
                enabled: false
            },
            gridLineWidth: 0,
            min: -2,
            max: 2
        },
        tooltip: {

            pointFormatter: function () {

                let str = "";//"<em>" + new Date(this.x).toDateString() + "</em><br/>";
                switch (this.y) {
                    case -2: str += "Terrible"; break;
                    case -1: str += "Unhappy"; break;
                    case 0: str += "Neutral"; break;
                    case 1: str += "Happy"; break;
                    case 2: str += "Joyous"; break;
                }
                return str;
            }
        },


        plotOptions: {
            series: {
                marker: {
                    enabled: true
                }
            }
        },

        colors: ['#6CF', '#39F', '#06C', '#036', '#000'],
        series: [{
            name: "Mood",
            data: dates,
            zoneAxis: 'y',
            zones: [ @Html.Raw(string.Join(",", Enum.GetValues(typeof(MoodEnum)).Cast<MoodEnum>().Select(m => (int)m).OrderBy(i => i).Select(i => $@"{{ value: { (i+0.5f).ToString(System.Globalization.CultureInfo.InvariantCulture) }, color: '{colorFunc((MoodEnum)i)}' }}"))) ]
        }],

        

        responsive: {
            rules: [{
                condition: {
                    maxWidth: 500
                },
                chartOptions: {
                    plotOptions: {
                        series: {
                            marker: {
                                radius: 2.5
                            }
                        }
                    }
                }
            }]
        }
    });

     chart.xAxis[0].setExtremes(new Date().getTime() - 1000 * 3600 * 24 * 365, new Date().getTime());
     chart.showResetZoom();
    </script>

}